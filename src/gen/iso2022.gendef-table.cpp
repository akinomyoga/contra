#include <cstdio>
#include "../enc.utf8.hpp"

char32_t const iso_ir_146_table[96] =
  {
   0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
   0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
   0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
   0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
   0x0416, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
   0x0425, 0x0418, 0x0408, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
   0x041F, 0x0409, 0x0420, 0x0421, 0x0422, 0x0423, 0x0412, 0x040A,
   0x040F, 0x0405, 0x0417, 0x0428, 0x0402, 0x040B, 0x0427, 0x005F,
   0x0436, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
   0x0445, 0x0438, 0x0458, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
   0x043F, 0x0459, 0x0440, 0x0441, 0x0442, 0x0443, 0x0432, 0x045A,
   0x045F, 0x0455, 0x0437, 0x0448, 0x0452, 0x045B, 0x0447, 0x007F
  };

char32_t const iso_ir_147_table[96] =
  {
   0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
   0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
   0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
   0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
   0x0416, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
   0x0425, 0x0418, 0x0408, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
   0x041F, 0x0409, 0x0420, 0x0421, 0x0422, 0x0423, 0x0412, 0x040A,
   0x040F, 0x0405, 0x0417, 0x0428, 0x0403, 0x040C, 0x0427, 0x005F,
   0x0436, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
   0x0445, 0x0438, 0x0458, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
   0x043F, 0x0459, 0x0440, 0x0441, 0x0442, 0x0443, 0x0432, 0x045A,
   0x045F, 0x0455, 0x0437, 0x0448, 0x0453, 0x045C, 0x0447, 0x007F
  };

char32_t const iso_ir_231_table[96] =
  {
   0x0000, 0x0141, 0x00D8, 0x0110, 0x00DE, 0x00C6, 0x0152, 0x02B9,
   0x00B7, 0x266D, 0x00AE, 0x00B1, 0x01A0, 0x01AF, 0x02BC, 0x0000,
   0x02BB, 0x0142, 0x00F8, 0x0111, 0x00FE, 0x00E6, 0x0153, 0x02BA,
   0x0131, 0x00A3, 0x00F0, 0x0000, 0x01A1, 0x01B0, 0x0000, 0x0000,
   0x00B0, 0x2113, 0x2117, 0x00A9, 0x266F, 0x00BF, 0x00A1, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0309, 0x0300, 0x0301, 0x0302, 0x0303, 0x0304, 0x0306, 0x0307,
   0x0308, 0x030C, 0x030A, 0xFE20, 0xFE21, 0x0315, 0x030B, 0x0310,
   0x0327, 0x0328, 0x0323, 0x0324, 0x0325, 0x0333, 0x0332, 0x0326,
   0x031C, 0x032E, 0xFE22, 0xFE23, 0x0000, 0x0313, 0x0000, 0x0000,
  };

char32_t const iso_ir_123_table[96] =
  {
   0x00A0, 0x00A1, 0x00A8, 0x00A3, 0x00A2, 0x00A5, 0x00B1, 0x00B4,
   0x207D, 0x207E, 0x00BD, 0x207A, 0x00B8, 0x00AD, 0x00B7, 0x207B,
   0x2070, 0x00B9, 0x00B2, 0x00B3, 0x2074, 0x2075, 0x2076, 0x2077,
   0x2078, 0x2079, 0x00BC, 0x00BE, 0x21D0, 0x2260, 0x2265, 0x00BF,
   0x00C0, 0x00C1, 0x00C2, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB,
   0x00CD, 0x00CE, 0x00CF, 0x00D1, 0x00D3, 0x00D4, 0x00D9, 0x00DA,
   0x00DB, 0x00DC, 0x00AE, 0x00A7, 0x00B6, 0x03BC, 0x00AA, 0x00BA,
   0x2018, 0x2019, 0x201C, 0x201D, 0x00AB, 0x00BB, 0x00B0, 0x00A6,
   0x00E0, 0x00E1, 0x00E2, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB,
   0x00ED, 0x00EE, 0x00EF, 0x00F1, 0x00F3, 0x00F4, 0x00F9, 0x00FA,
   0x00FB, 0x00FC, 0x00A9, 0x2500, 0x2502, 0x2514, 0x2518, 0x2510,
   0x250C, 0x251C, 0x2534, 0x2524, 0x252C, 0x253C, 0x00AC, 0x2588,
  };

char32_t const iso_ir_142_table[96] =
  {
   0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x0024, 0x00A5, 0x0000, 0x00A7,
   0x0000, 0x2018, 0x201C, 0x00AB, 0x2190, 0x2191, 0x2192, 0x2193,
   0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00D7, 0x00B5, 0x00B6, 0x00B7,
   0x00F7, 0x2019, 0x201D, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
   0x0000, 0xE006, 0xE007, 0xE008, 0xE009, 0xE00A, 0xE00B, 0xE00C,
   0xE00D, 0x0000, 0xE00E, 0xE011, 0xE013, 0xE00F, 0xE012, 0xE010,
   0x2014, 0x00B9, 0x00AE, 0x00A9, 0x2122, 0x2669, 0x00AC, 0x00A6,
   0x0000, 0x0000, 0x0000, 0x0000, 0x215B, 0x215C, 0x215D, 0x215E,
   0x2126, 0x00C6, 0x00D0, 0x00AA, 0x0126, 0x0000, 0x0132, 0x013F,
   0x0141, 0x00D8, 0x0152, 0x00BA, 0x00DE, 0x0166, 0x014A, 0x0149,
   0x0138, 0x00E6, 0x0111, 0x00F0, 0x0127, 0x0131, 0x0133, 0x0140,
   0x0142, 0x00F8, 0x0153, 0x00DF, 0x00FE, 0x0167, 0x014B, 0x00AD,
  };

char32_t const iso_ir_152_table[96] =
  {
   0x00A0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x201C, 0x0000, 0x2190, 0x2191, 0x2192, 0x2193,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x201D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x2122, 0x2669, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x215B, 0x215C, 0x215D, 0x215E,
   0x2126, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0132, 0x013F,
   0x0000, 0x0000, 0x0152, 0x0000, 0x0174, 0x0176, 0x0178, 0x0149,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0133, 0x0140,
   0x0000, 0x0000, 0x0153, 0x0000, 0x0175, 0x0177, 0x0000, 0x0000,
  };

char32_t const iso_ir_154_table[96] =
  {
   0x0000, 0x0000, 0x0100, 0x0108, 0x010A, 0x0000, 0x0116, 0x0112,
   0x011C, 0x2018, 0x201C, 0x2122, 0x2190, 0x2191, 0x2192, 0x2193,
   0x0000, 0x0000, 0x0101, 0x0109, 0x010B, 0x00F0, 0x0117, 0x0113,
   0x011D, 0x2019, 0x201D, 0x2669, 0x215B, 0x215C, 0x215D, 0x215E,
   0x0000, 0x011E, 0x0120, 0x0122, 0x0124, 0x0126, 0x0128, 0x0130,
   0x012A, 0x012E, 0x0132, 0x0134, 0x0136, 0x013B, 0x013F, 0x0145,
   0x2014, 0x014A, 0x014C, 0x0152, 0x0156, 0x015C, 0x0166, 0x00DE,
   0x0168, 0x016C, 0x016A, 0x0172, 0x0174, 0x00DD, 0x0176, 0x0178,
   0x2126, 0x011F, 0x0121, 0x0123, 0x0125, 0x0127, 0x0129, 0x0131,
   0x012B, 0x012F, 0x0133, 0x0135, 0x0137, 0x013C, 0x0140, 0x0146,
   0x0138, 0x014B, 0x014D, 0x0153, 0x0157, 0x015D, 0x0167, 0x00FE,
   0x0169, 0x016D, 0x016B, 0x0173, 0x0175, 0x00FD, 0x0177, 0x0149,
  };

char32_t const iso_ir_158_table[96] =
  {
   0x00B4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x02BF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0102, 0x00C2, 0x00C0, 0x0100, 0x01DE, 0x01E0, 0x01E2, 0x0114,
   0x00C8, 0x0112, 0x01E4, 0x01E6, 0x01E8, 0x014E, 0x00D2, 0x01EA,
   0x01EC, 0x016A, 0x01B7, 0x01EE, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0103, 0x00E2, 0x00E0, 0x0101, 0x01DF, 0x01E1, 0x01E3, 0x0115,
   0x00E8, 0x0113, 0x01E5, 0x01E7, 0x01E9, 0x014F, 0x00F2, 0x01EB,
   0x01ED, 0x016B, 0xE01E, 0x01EF, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  };

char32_t const iso_ir_180_table[96] =
  {
   0x00A0, 0x0102, 0x00C2, 0x00CA, 0x00D4, 0x01A0, 0x01AF, 0x0110,
   0x0103, 0x00E2, 0x00EA, 0x00F4, 0x01A1, 0x01B0, 0x0111, 0x1EB0,
   0x0300, 0x0309, 0x0303, 0x0301, 0x0323, 0x00E0, 0x1EA3, 0x00E3,
   0x00E1, 0x1EA1, 0x1EB2, 0x1EB1, 0x1EB3, 0x1EB5, 0x1EAF, 0x1EB4,
   0x1EAE, 0x1EA6, 0x1EA8, 0x1EAA, 0x1EA4, 0x1EC0, 0x1EB7, 0x1EA7,
   0x1EA9, 0x1EAB, 0x1EA5, 0x1EAD, 0x00E8, 0x1EC2, 0x1EBB, 0x1EBD,
   0x00E9, 0x1EB9, 0x1EC1, 0x1EC3, 0x1EC5, 0x1EBF, 0x1EC7, 0x00EC,
   0x1EC9, 0x1EC4, 0x1EBE, 0x1ED2, 0x0129, 0x00ED, 0x1ECB, 0x00F2,
   0x1ED4, 0x1ECF, 0x00F5, 0x00F3, 0x1ECD, 0x1ED3, 0x1ED5, 0x1ED7,
   0x1ED1, 0x1ED9, 0x1EDD, 0x1EDF, 0x1EE1, 0x1EDB, 0x1EE3, 0x00F9,
   0x1ED6, 0x1EE7, 0x0169, 0x00FA, 0x1EE5, 0x1EEB, 0x1EED, 0x1EEF,
   0x1EE9, 0x1EF1, 0x1EF3, 0x1EF7, 0x1EF9, 0x00FD, 0x1EF5, 0x1ED0,
  };

char32_t const iso_ir_182_table[96] =
  {
   0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
   0x1E80, 0x00A9, 0x1E82, 0x00AB, 0x1EF2, 0x00AD, 0x00AE, 0x0178,
   0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
   0x1E81, 0x00B9, 0x1E83, 0x00BB, 0x1EF3, 0x1E84, 0x1E85, 0x00BF,
   0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
   0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
   0x0174, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
   0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x0176, 0x00DF,
   0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
   0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
   0x0175, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
   0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x0177, 0x00FF,
  };

char32_t const iso_ir_198_table[96] =
  {
   0x00A0, 0x0000, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
   0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
   0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
   0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2017,
   0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
   0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
   0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
   0x05E8, 0x05E9, 0x05EA, 0x0000, 0x0000, 0x200E, 0x200F, 0x0000,
  };

char32_t const iso_ir_200_table[96] =
  {
   0x00A0, 0x0401, 0x04C7, 0x04D2, 0x04EC, 0x048C, 0x0406, 0x04E6,
   0x048A, 0x04C5, 0x04C9, 0x00AB, 0x04CD, 0x00AD, 0x049E, 0x02BC,
   0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
   0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
   0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
   0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
   0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
   0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
   0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
   0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
   0x2116, 0x0451, 0x04C8, 0x04D3, 0x04ED, 0x048D, 0x0456, 0x04E7,
   0x048B, 0x04C6, 0x04CA, 0x00BB, 0x04CE, 0x00A7, 0x049F, 0x02EE,
  };

char32_t const iso_ir_206_table[96] =
  {
   // これは実際 206 ではなくて 179
   0x00A0, 0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7,
   0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
   0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7,
   0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
   0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
   0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
   0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
   0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
   0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
   0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
   0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
   0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019,
  };

void putu(char32_t u, std::FILE* file) {
  if ((0x300<= u && u < 0x370) || (0x20D0 <= u && u < 0x2100) || (0xFE20 <= u && u < 0xFE30)) {
    std::fprintf(file, "<U+%X>", u);
  } else {
    contra::encoding::put_u8(u, file);
  }
}

void print_def(std::FILE* file, const char* name, char32_t const* table, unsigned char meta_offset = 0) {
  std::fprintf(file, "%s\n", name);
  std::fprintf(file, "  load SB94(B)\n");
  std::fprintf(file, "  map ");
  for (unsigned char a = 0x20; a <= 0x7F; a++) {
    char32_t u = table[a - 32];
    if (u && u != a + meta_offset) {
      std::putc(a, file);
      putu(u, file);
    }
  }
  std::fprintf(file, "\n");
}
void print_def_ref(std::FILE* file, const char* name, char32_t const* table, const char* refname, char32_t const* reftable) {
  std::fprintf(file, "%s\n", name);
  std::fprintf(file, "  load %s\n", refname);
  std::fprintf(file, "  map ");
  for (unsigned char a = 0x20; a <= 0x7F; a++) {
    char32_t u = table[a - 32];
    if (u != reftable[a - 32]) {
      std::putc(a, file);
      putu(u, file);
    }
  }
  std::fprintf(file, "\n");
}
void print_def_raw(std::FILE* file, const char* name, char32_t const* table) {
  std::fprintf(file, "%s\n", name);
  std::fprintf(file, "  map ");
  for (unsigned char a = '!'; a <= '~'; a++) {
    char32_t u = table[a - 32];
    if (u) {
      std::putc(a, file);
      putu(u, file);
    }
  }
  std::fprintf(file, "\n");
}

// ISO-IR-144: Cyrillic part of the Latin/Cyrillic Alphabet
//   Type: SB96
//   Escape sequence: 4/12 (L)
char32_t const iso_ir_144_table[96] = {
  0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407,
  0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F,
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
  0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457,
  0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A7, 0x045E, 0x045F,
};
// 以下は上の表を編集して作成した物である
char32_t const iso_ir_201_table[96] = {
  0x00A0, 0x0401, 0x04D0, 0x04D2, 0x04D6, 0x04AA, 0x0406, 0x04E6, // from wikipedia
  0x04E4, 0x04DC, 0x04A4, 0x04F8, 0x04DE, 0x00AD, 0x04F0, 0x04F4, // from wikipedia
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, // copy from ISO-IR-144
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, // copy from ISO-IR-144
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, // copy from ISO-IR-144
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, // copy from ISO-IR-144
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, // copy from ISO-IR-144
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, // copy from ISO-IR-144
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, // copy from ISO-IR-144
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, // copy from ISO-IR-144
  0x2116, 0x0451, 0x04D1, 0x04D3, 0x04D7, 0x04AB, 0x0456, 0x04E7, // from wikipedia
  0x04E5, 0x04DD, 0x04A5, 0x04F9, 0x04DF, 0x00A7, 0x04F1, 0x04F5, // from wikipedia
};
// ISO-IR-179: Baltic Rim Supplementary Set
//   Type: SB96
//   Escape sequence: 5/9 (Y)
char32_t const iso_ir_179_table[96] = {
  0x00A0, 0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7,
  0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7,
  0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
  0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
  0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
  0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
  0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
  0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
  0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
  0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
  0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019,
};

int main() {
  print_def(stdout, "ISO-IR-146", iso_ir_146_table);
  print_def_ref(stdout, "ISO-IR-147", iso_ir_147_table, "ISO-IR-146", iso_ir_146_table);
  print_def_raw(stdout, "ISO-IR-231", iso_ir_231_table);

  print_def(stdout, "ISO-IR-123", iso_ir_123_table, 0x80);
  print_def(stdout, "ISO-IR-142", iso_ir_142_table, 0x80);
  print_def(stdout, "ISO-IR-152", iso_ir_152_table, 0x80);
  print_def(stdout, "ISO-IR-154", iso_ir_154_table, 0x80);
  print_def(stdout, "ISO-IR-158", iso_ir_158_table, 0x80);

  print_def(stdout, "ISO-IR-180", iso_ir_180_table, 0x80);
  print_def(stdout, "ISO-IR-182", iso_ir_182_table, 0x80);
  print_def(stdout, "ISO-IR-198", iso_ir_198_table, 0x80);
  print_def(stdout, "ISO-IR-200", iso_ir_200_table, 0x80);
  print_def(stdout, "ISO-IR-206", iso_ir_206_table, 0x80);

  print_def_ref(stdout, "ISO-IR-201", iso_ir_201_table, "ISO-IR-144", iso_ir_144_table);
  print_def_ref(stdout, "ISO-IR-206", iso_ir_206_table, "ISO-IR-179", iso_ir_179_table);
  return 0;
}
