#include "enc.c2w.hpp"
#include <cstddef>
#include <cstdint>
#include <iterator>

namespace contra {
namespace encoding {
namespace {

  // 以下のコードは ble.sh 5d245af (2019-04-04) に基づく。
  // 本当は Unicode 表に基づくちゃんとした物 (0幅もちゃんと判定) を使うべき。

  static int c2w_determine_unambiguous(std::uint32_t code) {
    if (code < 0xA0) return 1;

    // 以下は全角に確定している範囲
    if (code < 0xFB00) {
      if (0x2E80 <= code && code < 0xA4D0) {
        // 半角スペース?
        if (code == 0x303F) return -1;
        // 絵文字
        if (code == 0x3030 || code == 0x303d || code == 0x3297 || code == 0x3299) return -1;

        return 2;
      } else if ((0xAC00 <= code && code < 0xD7A4) || 0xF900 <= code) {
        return 2;
      } else if ((0x1100 <= code && code < 0x1160) || code == 0x2329 || code == 0x232A) {
        return 2;
      }
    } else if (code < 0x10000) {
      if ((0xFF00 <= code && code < 0xFF61) ||
        (0xFE30 <= code && code < 0xFE70) ||
        (0xFFE0 <= code && code < 0xFFE7)) return 2;
    } else {
      if ((0x20000 <= code && code < 0x2FFFE) ||
        (0x30000 <= code && code < 0x3FFFE)) return 2;
    }

    // 他は取り敢えず曖昧
    return -1;
  }

  static int c2w_is_emoji(std::uint32_t code) {
    static std::uint32_t emoji_wranges[] = {
      8252, 8253, 8265, 8266, 8482, 8483, 8505, 8506, 8596, 8602, 8617, 8619, 8986, 8988,
      9000, 9001, 9167, 9168, 9193, 9204, 9208, 9211, 9410, 9411, 9642, 9644, 9654, 9655,
      9664, 9665, 9723, 9727, 9728, 9733, 9742, 9743, 9745, 9746, 9748, 9750, 9752, 9753,
      9757, 9758, 9760, 9761, 9762, 9764, 9766, 9767, 9770, 9771, 9774, 9776, 9784, 9787,
      9792, 9793, 9794, 9795, 9800, 9812, 9824, 9825, 9827, 9828, 9829, 9831, 9832, 9833,
      9851, 9852, 9855, 9856, 9874, 9880, 9881, 9882, 9883, 9885, 9888, 9890, 9898, 9900,
      9904, 9906, 9917, 9919, 9924, 9926, 9928, 9929, 9934, 9936, 9937, 9938, 9939, 9941,
      9961, 9963, 9968, 9974, 9975, 9979, 9981, 9982, 9986, 9987, 9989, 9990, 9992, 9998,
      9999, 10000, 10002, 10003, 10004, 10005, 10006, 10007, 10013, 10014, 10017, 10018,
      10024, 10025, 10035, 10037, 10052, 10053, 10055, 10056, 10060, 10061, 10062, 10063,
      10067, 10070, 10071, 10072, 10083, 10085, 10133, 10136, 10145, 10146, 10160, 10161,
      10175, 10176, 10548, 10550, 11013, 11016, 11035, 11037, 11088, 11089, 11093, 11094,
      // 12336, 12337, 12349, 12350, 12951, 12952, 12953, 12954, これらは特別に処理する。
      126980, 126981,
      127183, 127184, 127344, 127346, 127358, 127360, 127374, 127375, 127377, 127387,
      127462, 127488, 127489, 127491, 127514, 127515, 127535, 127536, 127538, 127547,
      127568, 127570, 127744, 127778, 127780, 127892, 127894, 127896, 127897, 127900,
      127902, 127985, 127987, 127990, 127991, 128254, 128255, 128318, 128329, 128335,
      128336, 128360, 128367, 128369, 128371, 128379, 128391, 128392, 128394, 128398,
      128400, 128401, 128405, 128407, 128420, 128422, 128424, 128425, 128433, 128435,
      128444, 128445, 128450, 128453, 128465, 128468, 128476, 128479, 128481, 128482,
      128483, 128484, 128488, 128489, 128495, 128496, 128499, 128500, 128506, 128592,
      128640, 128710, 128715, 128723, 128736, 128742, 128745, 128746, 128747, 128749,
      128752, 128753, 128755, 128761, 129296, 129339, 129340, 129343, 129344, 129350,
      129351, 129357, 129360, 129388, 129408, 129432, 129472, 129473, 129488, 129511,
    };

    if ((8252 <= code && code <= 0x2b55) || (0x1f004 < code && code <= 0x1f9e6)) return false;

    if (0x3030 <= code && code <= 0x3299)
      return code == 0x3030 || code == 0x303d || code == 0x3297 || code == 0x3299;

    std::size_t l = 0, u = std::size(emoji_wranges);
    while (l + 1 < u) {
      std::size_t const m = (l + u) / 2;
      (emoji_wranges[m] <= code ? l : u) = m;
    }

    return (l & 1) == 0;
  }

  static int c2w_west(std::uint32_t code, c2w_type type) {
    int result = c2w_determine_unambiguous(code);
    if (result >= 0) return result;
    if ((type & _c2w_emoji_mask) && c2w_is_emoji(code))
      return unsigned(type & _c2w_emoji_mask) >> _c2w_emoji_shift;
    return 1;
  }

  static int c2w_east(std::uint32_t code, c2w_type type) {
    static std::uint32_t east_wranges[] = {
      161, 162, 164, 165, 167, 169, 170, 171, 174, 175, 176, 181, 182, 187, 188, 192, 198, 199, 208, 209,
      215, 217, 222, 226, 230, 231, 232, 235, 236, 238, 240, 241, 242, 244, 247, 251, 252, 253, 254, 255,
      257, 258, 273, 274, 275, 276, 283, 284, 294, 296, 299, 300, 305, 308, 312, 313, 319, 323, 324, 325,
      328, 332, 333, 334, 338, 340, 358, 360, 363, 364, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471,
      472, 473, 474, 475, 476, 477, 593, 594, 609, 610, 708, 709, 711, 712, 713, 716, 717, 718, 720, 721,
      728, 732, 733, 734, 735, 736, 913, 930, 931, 938, 945, 962, 963, 970, 1025, 1026, 1040, 1104, 1105, 1106,
      8208, 8209, 8211, 8215, 8216, 8218, 8220, 8222, 8224, 8227, 8228, 8232, 8240, 8241, 8242, 8244, 8245, 8246, 8251, 8252,
      8254, 8255, 8308, 8309, 8319, 8320, 8321, 8325, 8364, 8365, 8451, 8452, 8453, 8454, 8457, 8458, 8467, 8468, 8470, 8471,
      8481, 8483, 8486, 8487, 8491, 8492, 8531, 8533, 8539, 8543, 8544, 8556, 8560, 8570, 8592, 8602, 8632, 8634, 8658, 8659,
      8660, 8661, 8679, 8680, 8704, 8705, 8706, 8708, 8711, 8713, 8715, 8716, 8719, 8720, 8721, 8722, 8725, 8726, 8730, 8731,
      8733, 8737, 8739, 8740, 8741, 8742, 8743, 8749, 8750, 8751, 8756, 8760, 8764, 8766, 8776, 8777, 8780, 8781, 8786, 8787,
      8800, 8802, 8804, 8808, 8810, 8812, 8814, 8816, 8834, 8836, 8838, 8840, 8853, 8854, 8857, 8858, 8869, 8870, 8895, 8896,
      8978, 8979, 9312, 9450, 9451, 9548, 9552, 9588, 9600, 9616, 9618, 9622, 9632, 9634, 9635, 9642, 9650, 9652, 9654, 9656,
      9660, 9662, 9664, 9666, 9670, 9673, 9675, 9676, 9678, 9682, 9698, 9702, 9711, 9712, 9733, 9735, 9737, 9738, 9742, 9744,
      9748, 9750, 9756, 9757, 9758, 9759, 9792, 9793, 9794, 9795, 9824, 9826, 9827, 9830, 9831, 9835, 9836, 9838, 9839, 9840,
      10045, 10046, 10102, 10112, 57344, 63744, 65533, 65534, 983040, 1048574, 1048576, 1114110,
    };

    int result = c2w_determine_unambiguous(code);
    if (result >= 0) return result;
    if ((type & _c2w_emoji_mask) && c2w_is_emoji(code))
      return unsigned(type & _c2w_emoji_mask) >> _c2w_emoji_shift;

    if (code < east_wranges[0]) return 1;
    std::size_t l = 0, u = std::size(east_wranges);
    while (l + 1 < u) {
      std::size_t m = (l + u) / 2;
      (east_wranges[m] <= code ? l : u) = m;
    }
    return (l & 1) == 0 ? 2 : 1;
  }

  static int c2w_emacs(std::uint32_t code, c2w_type type) {
    static std::uint32_t emacs_wranges[] = {
      162, 164, 167, 169, 172, 173, 176, 178, 180, 181, 182, 183, 215, 216, 247, 248, 272, 273, 276, 279,
      280, 282, 284, 286, 288, 290, 293, 295, 304, 305, 306, 308, 315, 316, 515, 516, 534, 535, 545, 546,
      555, 556, 608, 618, 656, 660, 722, 723, 724, 725, 768, 769, 770, 772, 775, 777, 779, 780, 785, 787,
      794, 795, 797, 801, 805, 806, 807, 813, 814, 815, 820, 822, 829, 830, 850, 851, 864, 866, 870, 872,
      874, 876, 898, 900, 902, 904, 933, 934, 959, 960, 1042, 1043, 1065, 1067, 1376, 1396, 1536, 1540, 1548, 1549,
      1551, 1553, 1555, 1557, 1559, 1561, 1563, 1566, 1568, 1569, 1571, 1574, 1576, 1577, 1579, 1581, 1583, 1585, 1587, 1589,
      1591, 1593, 1595, 1597, 1599, 1600, 1602, 1603, 1611, 1612, 1696, 1698, 1714, 1716, 1724, 1726, 1734, 1736, 1739, 1740,
      1742, 1744, 1775, 1776, 1797, 1799, 1856, 1857, 1858, 1859, 1898, 1899, 1901, 1902, 1903, 1904,
    };

    if (code < 0xA0) return 1;

    if ((type & _c2w_emoji_mask) && c2w_is_emoji(code))
      return std::uint32_t(type & _c2w_emoji_mask) >> _c2w_emoji_shift;

    if ((0x3100 <= code && code < 0xA4D0) || (0xAC00 <= code && code < 0xD7A4))
      return 2;

    std::uint32_t tIndex;
    if (0x2000 <= code && code < 0x2700)
      tIndex = 0x0100 + code - 0x2000;
    else {
      std::uint32_t al = code & 0xFF;
      std::uint32_t ah = code >> 8;
      if (ah==0x00) {
        tIndex = al;
      } else if (ah == 0x03) {
        int a = 0xFF & ((al - 0x91) & ~0x20);
        return a < 25 && a != 17 ? 2 : 1;
      } else if (ah == 0x04) {
        return al == 1 || (0x10 <= al && al <= 0x50) || al == 0x51 ? 2 : 1;
      } else if (ah == 0x11) {
        return al < 0x60 ? 2 : 1;
      } else if (ah == 0x2e) {
        return al >= 0x80 ? 2 : 1;
      } else if (ah == 0x2f) {
        return 2;
      } else if (ah == 0x30) {
        return al != 0x3f ? 2 : 1;
      } else if (ah == 0xf9 || ah == 0xfa) {
        return 2;
      } else if (ah==0xfe) {
        return 0x30 <= al && al < 0x70 ? 2 : 1;
      } else if (ah==0xff) {
        return (0x01 <= al && al < 0x61) || (0xE0 <= al && al <= 0xE7) ? 2 : 1;
      } else
        return 1;
    }

    if (tIndex < emacs_wranges[0]) return 1;

    std::size_t l = 0, u = std::size(emacs_wranges);
    while (l + 1 < u) {
      std::size_t m = (l + u) / 2;
      (emacs_wranges[m] <= tIndex ? l : u) = m;
    }
    return (l & 1) == 0 ? 2 : 1;
  }

}

  int c2w(char32_t u, c2w_type type) {
    switch (type & _c2w_width_mask) {
    case c2w_width_west:  return c2w_west((std::uint32_t) u, type);
    case c2w_width_east:  return c2w_east((std::uint32_t) u, type);
    case c2w_width_emacs: return c2w_emacs((std::uint32_t) u, type);
    default: return c2w_west((std::uint32_t) u, type);
    }
  }

}
}
